setup:
  - do:
      indices.create:
        index: index-with-dense-vector
        body:
          mappings:
            properties:
              vector:
                type: dense_vector
                dims: 2
                index: true
                similarity: l2_norm
  - do:
      index:
        index: index-with-dense-vector
        body:
          vector: [1,1]
          text: "This is a pen."
  - do:
      index:
        index: index-with-dense-vector
        body:
          vector: [-1,-1]
          text: "This is an apple."
  - do:
      indices.refresh: {}
  - do:
      indices.forcemerge:
        index: index-with-dense-vector
        max_num_segments: 1
---
"query vector builder: (2,2) -> translation (+3,+3) -> rotation +pi/2  -> rotation +pi/2":
  - do:
      search:
        index: index-with-dense-vector
        body:
          knn:
            field: vector
            query_vector_builder:
              affine_transformation:
                transformation_matrix: |
                  [
                   [0,-1, 0],
                   [1, 0, 0],
                   [0, 0, 1]
                  ]
                query_vector_builder:
                  affine_transformation:
                    transformation_matrix: |
                      [
                       [0,-1, 0],
                       [1, 0, 0],
                       [0, 0, 1]
                      ]
                    query_vector_builder:
                      affine_transformation:
                        query_vector: [2,2]
                        transformation_matrix: |
                          [
                           [1, 0, 3],
                           [0, 1, 3],
                           [0, 0, 1]
                          ]
            k: 1
            num_candidates: 10
  - match: { hits.total.value: 1 }
  - match: { hits.hits.0._source.vector: [-1,-1] }
  - match: { hits.hits.0._source.text: "This is an apple." }
---
"ingest processor: (2,2) -> rotation +pi/2 -> do nothing -> translation (+1,+1)":
  - do:
      ingest.simulate:
        body: >
          {
            "pipeline": {
              "description": "_description",
              "processors": [
                {
                  "affine_transformation" : {
                    "field" : "vector",
                    "transformation_matrix_field" : "transformation_matrix"
                  }
                }
              ]
            },
            "docs": [
              {
                "_index": "index",
                "_id": "id",
                "_source": {
                  "vector": [2,2],
                  "transformation_matrix": [
                    "[[0,-1,0],[1,0,0],[0, 0, 1]]",
                    "[[1,0,0],[0,1,0],[0, 0, 1]]",
                    "[[1,0,1],[0,1,1],[0, 0, 1]]"
                  ]
                }
              }
            ]
          }
  - length: { docs: 1 }
  - match: { docs.0.doc._source.vector: [-1.0,3.0] }
